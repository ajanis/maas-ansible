---
- name: backup | Generate List of Archiveable Directories
  vars:
    archive: []
  ansible.builtin.set_fact:
    archive_list: "{{ archive + [item] }}"
  loop:
    - "{{ ('maas_postgres_primary' in group_names) | ternary('{{ maas_postgres_backup_dir }}', '') }}"
    - "{{ (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names)) | ternary('{{ maas_snap_backup_path }}', '') }}"
    - "{{ (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names)) | ternary('{{ maas_config_backup_path }}', '') }}"
    - "{{ (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names)) | ternary('{{ maas_runtime_backup_path }}', '') }}"
  when: item

- name: backup | Print backup archives to create
  ansible.builtin.debug:
    msg: "{{ item }}"
  when: item is defined
  loop: "{{ archive_list }}"

- name: backup | Stop MAAS snap
  ansible.builtin.command:
    cmd: snap stop maas
  register: snap_stop
  changed_when: snap_stop is changed
  when:
    - not maas_install_deb | bool
    - (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names))

- name: backup | Save MAAS snap
  ansible.builtin.command:
    cmd: snap save maas
  register: snap_save
  changed_when: snap_save is changed
  when:
    - not maas_install_deb | bool
    - (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names))

- name: backup | Set fact for the archive created by MAAS snap backup task
  ansible.builtin.set_fact:
    maas_snap_backup_file: "{{ maas_snap_backup_path }}/{{ (snap_save.stdout_lines | last) | regex_replace('^(?P<set>[0-9]+)\\s+(?P<snap>[a-z]+)\\s+(?:[0-9|\\.|a-z]+)\\\
      s+(?P<version>[0-9|\\.|a-z|-]+)\\s+(?P<revision>[0-9]+).*$', '\\g<set>_\\g<snap>_\\g<version>_\\g<revision>') }}.zip"
  when:
    - snap_save is success
    - not maas_install_deb | bool
    - (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names))

- name: backup | Stat file details for MAAS snap backup
  ansible.builtin.stat:
    path: "{{ maas_snap_backup_file }}"
  register: maas_snap_backup
  when:
    - snap_save is success
    - not maas_install_deb | bool
    - (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names))

- name: backup | Print file details for MAAS snap backup
  ansible.builtin.debug:
    msg: |
      Exists: {{ maas_snap_backup.stat.exists }}
      Path: {{ maas_snap_backup.stat.path }}
      File Size: {{ maas_snap_backup.stat.size }}
      Checksum: {{ maas_snap_backup.stat.checksum }}
  when:
    - maas_snap_backup.stat.exists | bool
    - not maas_install_deb | bool
    - (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names))

- name: backup | Create archive from all backup locations
  community.general.archive:
    path: "{{ item }}"
    mode: "0644"
    exclude_path:
      - "{{ maas_exclude_backup_path }}"
    dest: "{{ maas_backup_dest_path }}"
  loop: "{{ archive_list }}"
  register: backups_created
  when: archive_list is defined

- name: backup | Stat archive files
  ansible.builtin.stat:
    path: "{{ item.dest }}"
  register: maas_archive_files
  when: backups_created is defined
  loop: "{{ backups_created.results }}"

- name: backup | Print archive file information
  ansible.builtin.debug:
    msg: |
      Exists: {{ item.stat.exists }}
      Path: {{ item.stat.path }}
      File Size: {{ item.stat.size }}
      Checksum: {{ item.stat.checksum }}
  when: backups_created is defined
  loop: "{{ maas_archive_files.results }}"

- name: backup | Download Backup
  ansible.posix.synchronize:
    mode: pull
    dest: "{{ maas_backup_download_path }}/{{ item.dest | basename }}"
    src: "{{ item.dest }}"
    delete: true
  loop: "{{ backups_created.results }}"
  when: item

- name: backup | Delete backup archives
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  when: item is defined
  loop: "{{ archive_list }}"
