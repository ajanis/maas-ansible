---
- name: backup | Generate List of Archiveable Directories
  ansible.builtin.set_fact:
    archive_list: "{{ (archive_list | default([])) + [item] }}"
  loop:
    - "{{ ('maas_postgres_primary' in group_names) | ternary('{{ maas_postgres_backup_dir }}', '') }}"
    - "{{ (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names)) | ternary('{{ maas_snap_backup_path }}', '') }}"
    - "{{ (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names)) | ternary('{{ maas_config_backup_path }}', '') }}"
    - "{{ (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names)) | ternary('{{ maas_runtime_backup_path }}', '') }}"
  when: item

- name: backup | Print backup locations
  ansible.builtin.debug:
    msg: "{{ archive_list }}"


- name: backup | Stop MAAS snap
  ansible.builtin.command:
    cmd: snap stop maas
  register: snap_stop
  until: snap_stop is success
  changed_when: snap_stop is success
  when:
    - not maas_install_deb | bool
    - (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names))

- name: backup | Save MAAS snap
  ansible.builtin.command:
    cmd: snap save maas
  register: snap_save
  until: snap_save is success
  changed_when: snap_save is success
  when:
    - snap_stop is success
    - not maas_install_deb | bool
    - (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names))

- name: backup | Start MAAS snap
  ansible.builtin.command:
    cmd: snap start maas
  register: snap_start
  until: snap_start is success
  changed_when: snap_start is success
  when:
    - snap_save is success
    - not maas_install_deb | bool
    - (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names))

- name: backup | Set fact for MAAS snap backup location
  ansible.builtin.set_fact:
    maas_snap_backup_file: "{{ maas_snap_backup_path }}/{{ (snap_save.stdout_lines | last) | regex_replace('^(?P<set>[0-9]+)\\s+(?P<snap>[a-z]+)\\s+(?:[0-9|\\.|a-z]+)\\\
      s+(?P<version>[0-9|\\.|a-z|-]+)\\s+(?P<revision>[0-9]+).*$', '\\g<set>_\\g<snap>_\\g<version>_\\g<revision>') }}.zip"
  when:
    - snap_save is success
    - not maas_install_deb | bool
    - (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names))

- name: backup | Stat file details for MAAS snap backup
  ansible.builtin.stat:
    path: "{{ maas_snap_backup_file }}"
  register: maas_snap_backup
  when:
    - snap_save is success
    - not maas_install_deb | bool
    - (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names))

- name: backup | Print file details for MAAS snap backup
  ansible.builtin.debug:
    msg: |
      Exists: {{ maas_snap_backup.stat.exists }}
      Path: {{ maas_snap_backup.stat.path }}
      File Size: {{ maas_snap_backup.stat.size }}
      Checksum: {{ maas_snap_backup.stat.checksum }}
  when:
    - maas_snap_backup.stat.exists | bool
    - not maas_install_deb | bool
    - (('maas_region_controller' in group_names) or ('maas_rack_controller' in group_names))

- name: backup | Create archive from all backup locations
  community.general.archive:
    path: "{{ archive_list }}"
    mode: "0644"
    exclude_path:
      - "{{ maas_exclude_backup_path }}"
    dest: "{{ maas_backup_dest_path }}"
  register: backup_archive_created
  when:
    - (archive_list | length) > 0
  until: backup_archive_created is success

- name: backup | Download Backup Archive
  ansible.posix.synchronize:
    mode: pull
    dest: "{{ maas_backup_download_path }}/{{ maas_backup_dest_path | basename }}"
    src: "{{ maas_backup_dest_path }}"
    delete: true
  register: backup_archive_downloaded
  until: backup_archive_downloaded is success
  when:
    - backup_archive_created is success

- name: backup | Delete backup archives
  ansible.builtin.file:
    path: "{{ maas_backup_dest_path }}"
    state: absent
  when: backup_archive_downloaded is success
