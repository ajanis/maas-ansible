---
# Installs MAAS

- name: install_maas | Install MAAS - Snap
  community.general.snap:
    name: maas
    channel: "{{ maas_version }}/{{ maas_snap_channel }}"
    state: present
  register: maas_region_new_installation
  when: maas_installation_type | lower == 'snap'

- name: install_maas | Add MAAS apt Repository
  ansible.builtin.apt_repository:
    repo: ppa:maas/{{ maas_version }}
  when: maas_installation_type | lower == 'deb'

- name: install_maas | Install Chrony
  ansible.builtin.apt:
    name: chrony
    state: "{{ maas_deb_state | default('present') }}"
    update_cache: true

- name: install_maas | Install MAAS Region Controller - Deb
  ansible.builtin.apt:
    name:
      - maas-region-api
    state: "{{ maas_deb_state | default('present') }}"
    update_cache: true
    cache_valid_time: 3600
  register: maas_region_new_installation
  when: (maas_installation_type | lower == 'deb')

- name: install_maas | Update regiond.conf
  ansible.builtin.template:
    src: regiond.conf.j2
    dest: /etc/maas/regiond.conf
    mode: "0644"
    owner: maas
    group: maas
  when: maas_installation_type | lower == 'deb'

- name: install_maas | Initialise MAAS Controller - Snap
  ansible.builtin.command: >
    maas init
    {{ 'region+rack' if 'maas_rack_controller' in group_names else 'region' }}
    --maas-url={{ maas_url }}
    --database-uri {{ maas_postgres_uri }}
  when:
    - maas_installation_type | lower == 'snap'
    - maas_region_new_installation is changed
  throttle: 1
  register: maas_initialize
  changed_when: maas_initialize is success

- name: install_maas | Wait For Postgres Primary To Be Elected
  ansible.builtin.uri:
    url: http://{{ groups['maas_postgres'] }}:{{ maas_pgsql_check_port | default(23267) }}
    status_code:
      - 200
      - 204
    use_proxy: false
  register: pg_healthcheck
  until: pg_healthcheck is success
  retries: 5
  delay: 2
  when: maas_ha_postgres_enabled | bool

- name: install_maas | Migrate MAAS database
  ansible.builtin.command: "{{ 'maas' if maas_installation_type | lower == 'snap' else 'maas-region' }} migrate"
  changed_when: pg_migrate is success
  register: pg_migrate
  until: pg_migrate is success
  retries: 1
  delay: 2
  run_once: true

# MAAS region controller only needs to be initialized in this case if rbac or candid are in use, otherwise the regiond.conf write handles init
- name: install_maas | Initialise MAAS Controller - Deb
  ansible.builtin.expect:
    command: >
      maas init --rbac-url={{ maas_rbac_url | default('') | quote }}
      --candid-agent-file={{ maas_candid_auth_file | default('') | quote }}
    responses:
      "(?i)Username: ": "{{ admin_username }}"
      "(?i)Password: ": "{{ admin_password }}"
      "(?i)Again: ": "{{ admin_password }}"
      "(?i)Email: ": "{{ admin_email }}"
      "(?i)Import SSH keys ": "{{ admin_id if admin_id is defined else '' }}"
  when:
    - maas_installation_type | lower == 'deb'
    - maas_region_new_installation is changed

- name: install_maas | Starting MAAS region service
  ansible.builtin.systemd:
    name: maas-regiond.service
    state: started
    no_block: false
  when: maas_installation_type | lower == 'deb'

- name: install_maas | Add an administrator to MAAS
  when:
    - maas_region_new_installation is changed
    - maas_installation_type | lower == 'snap'
  block:
    - name: install_maas | Add new MAAS administrator
      ansible.builtin.command: >-
        maas createadmin \
        --username={{ admin_username }} --password={{ admin_password }} \
        --email={{ admin_email }} --ssh-import={{ admin_id if admin_id is defined else '' }}
      run_once: true
      register: maas_create_admin
      changed_when: maas_create_admin is success
  rescue:
    - name: install_maas | Print failure reason
      ansible.builtin.debug:
        msg: "{{ maas_create_admin }}"
      run_once: true

- name: install_maas | Enable TLS
  ansible.builtin.include_role:
    name: common
    tasks_from: TLS
  # TLS is available only in MAAS 3.2 or higher
  when: maas_version is version("3.2", '>=') and enable_tls

- name: install_maas | Wait For MAAS To Create Secret File
  ansible.builtin.wait_for:
    path: "{{ maas_secret_file }}"
    state: present

- name: install_maas | Read MAAS Secret For Rack Controllers
  ansible.builtin.command: cat "{{ maas_secret_file }}"
  register: maas_rack_secret_tmp
  changed_when: maas_rack_secret_tmp is success

- name: install_maas | Save MAAS Secret
  ansible.builtin.set_fact:
    maas_rack_secret: "{{ maas_rack_secret_tmp.stdout }}"
    cacheable: true
  run_once: true
  delegate_facts: true
  delegate_to: "{{ rack_controller }}"
  loop: "{{ groups['maas_rack_controller'] }}"
  loop_control:
    loop_var: rack_controller
  no_log: true
  when:
    - ('maas_rack_controller' not in group_names)


- name: install_maas | Create Ansible installation metric file
  ansible.builtin.file:
    path: "{{ maas_installmetric_file }}"
    state: touch
    mode: "0644"
