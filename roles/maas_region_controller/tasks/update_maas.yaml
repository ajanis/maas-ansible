---
- name: update_maas | Snap refresh
  ansible.builtin.command: snap refresh --channel={{ maas_version }}/{{ maas_snap_channel }} maas
  register: snap_refresh
  when:
    - maas_installation_type | lower == 'snap'
    - always
  changed_when: snap_refresh is success

- name: update_maas | Add MAAS apt Repository
  ansible.builtin.apt_repository:
    repo: ppa:maas/{{ maas_version }}
  when: maas_installation_type | lower == 'deb'

- name: update_maas | Update MAAS - Deb
  ansible.builtin.apt:
    name:
      - maas-region-api
    state: present
    update_cache: true
    cache_valid_time: 3600
  when: maas_installation_type | lower == 'deb' and '"maas_rack_controller" not in group_names'

- name: update_maas | Migrate MAAS database
  ansible.builtin.command: "{{ 'maas' if maas_installation_type | lower == 'snap' else 'maas-region' }} migrate"
  register: maas_db_migrated
  changed_when: maas_db_migrated is success
  run_once: true

- name: update_maas | Refresh MAAS API
  ansible.builtin.command: maas refresh
  register: maas_api_refresh
  changed_when: maas_api_refresh is success

- name: update_maas | Wait For MAAS To Create Secret File
  ansible.builtin.wait_for:
    path: "{{ maas_secret_file }}"
    state: present

- name: update_maas | Read MAAS Secret For Rack Controllers
  ansible.builtin.command: cat "{{ maas_secret_file }}"
  register: maas_rack_secret_tmp
  changed_when: maas_rack_secret_tmp is success

- name: update_maas | Save MAAS Secret
  ansible.builtin.set_fact:
    maas_rack_secret: "{{ maas_rack_secret_tmp.stdout }}"
    cacheable: true
  run_once: true
  delegate_facts: true
  delegate_to: "{{ rack_controller }}"
  loop: "{{ groups['maas_rack_controller'] }}"
  loop_control:
    loop_var: rack_controller
  no_log: true
